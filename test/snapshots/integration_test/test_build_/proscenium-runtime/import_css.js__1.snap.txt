// runtime/import_css.js
async function digest(value) {
  console.log("value", value);
  value = new TextEncoder().encode(value);
  const view = new DataView(await crypto.subtle.digest("SHA-1", value));
  let hexCodes = "";
  for (let index = 0; index < view.byteLength; index += 4) {
    hexCodes += view.getUint32(index).toString(16).padStart(8, "0");
  }
  return hexCodes.slice(0, 8);
}
var proxyCache = {};
async function append(path) {
  if (!document.head.querySelector(`link[rel=stylesheet][href='${path}']`)) {
    const ele = document.createElement("link");
    ele.setAttribute("rel", "stylesheet");
    ele.setAttribute("media", "all");
    ele.setAttribute("href", path);
    document.head.appendChild(ele);
  }
  if (Object.keys(proxyCache).includes(path)) {
    return proxyCache[path];
  }
  const hashValue = await digest(path);
  return proxyCache[path] = new Proxy({}, {
    get(target, prop, receiver) {
      if (prop in target || typeof prop === "symbol") {
        return Reflect.get(target, prop, receiver);
      } else {
        return `${prop}${hashValue}`;
      }
    }
  });
}
export {
  append
};
