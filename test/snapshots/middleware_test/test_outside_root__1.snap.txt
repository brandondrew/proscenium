// ../../lib/component_manager/manager.jsx
import { Suspense, createElement, useState, useEffect, useMemo } from "/Users/joelmoss/dev/proscenium/lib/component_manager/node_modules/.pnpm/react@18.2.0/node_modules/react/index.js?outsideRoot";
import { createPortal } from "/Users/joelmoss/dev/proscenium/lib/component_manager/node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js?outsideRoot";
import joel from "/Users/joelmoss/dev/proscenium/lib/component_manager/joel.js?outsideRoot";
import { Fragment, jsx } from "/Users/joelmoss/dev/proscenium/lib/component_manager/node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js?outsideRoot";
joel();
var Manager = ({ components, wrapper, debug }) => {
  const mappedComponents = components.map(
    (comp, key) => comp.lazy ? /* @__PURE__ */ jsx(Observed, {
      debug,
      ...comp
    }, key) : /* @__PURE__ */ jsx(Portaled, {
      debug,
      ...comp
    }, key)
  );
  if (wrapper) {
    return createElement(wrapper, { debug, children: mappedComponents });
  } else {
    return /* @__PURE__ */ jsx(Fragment, {
      children: mappedComponents
    });
  }
};
var Portaled = ({ component, path, debug, domElement, props }) => {
  const content = domElement.hasChildNodes() && domElement.firstElementChild;
  let shownDebugMsg = false;
  useEffect(() => {
    if (debug && !shownDebugMsg) {
      shownDebugMsg = true;
      console.groupCollapsed(`[proscenium/component-manager] Rendering %o`, path);
      console.log("domElement: %o", domElement);
      console.log("props: %o", props);
      console.groupEnd();
    }
  }, []);
  return createPortal(
    /* @__PURE__ */ jsx(Suspense, {
      fallback: /* @__PURE__ */ jsx(Fallback, {
        content
      }),
      children: createElement(component, props)
    }),
    domElement
  );
};
var Observed = ({ domElement, debug, componentPath, ...comp }) => {
  const [isVisible, setIsVisible] = useState(false);
  const observer = useMemo(() => {
    return new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        !isVisible && entry.isIntersecting && setIsVisible(true);
      });
    });
  }, [isVisible]);
  useEffect(() => {
    if (isVisible) {
      observer.unobserve(domElement);
      return;
    }
    observer.observe(domElement);
    return () => observer.unobserve(domElement);
  }, [domElement, isVisible, observer]);
  if (!isVisible)
    return null;
  return /* @__PURE__ */ jsx(Portaled, {
    ...{ domElement, componentPath, debug },
    ...comp
  });
};
var Fallback = ({ content }) => {
  useEffect(() => {
    content?.remove();
  }, []);
  if (!content)
    return null;
  return /* @__PURE__ */ jsx("div", {
    dangerouslySetInnerHTML: { __html: content.outerHTML }
  });
};
var manager_default = Manager;
export {
  manager_default as default
};
