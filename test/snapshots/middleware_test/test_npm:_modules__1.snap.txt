// node_modules/@proscenium/component-manager/index.js
var component_manager_default = async (opts = {}) => {
  const options = {
    debug: false,
    selector: ".componentManagedByProscenium",
    buildComponentPath(x) {
      return x;
    },
    ...opts
  };
  const nodes = document.querySelectorAll(options.selector);
  if (nodes.length < 1)
    return;
  const { lazy, createElement } = await import("/node_modules/.pnpm/@proscenium+component-manager@0.1.4_biqbaboplfbrettd7655fr4n2y/node_modules/react/index.js");
  const { createRoot } = await import("/node_modules/.pnpm/@proscenium+component-manager@0.1.4_biqbaboplfbrettd7655fr4n2y/node_modules/react-dom/client.js");
  const Manager = lazy(() => import("/node_modules/@proscenium/component-manager/manager.jsx"));
  const wrapper = lazy(() => import(options.wrapWith));
  const components = Array.from(nodes, (domElement) => {
    const { path, props, ...params } = JSON.parse(domElement.dataset.component);
    const cpath = options.buildComponentPath(path);
    if (options.debug) {
      console.groupCollapsed(`[proscenium/component-manager] Found %o`, cpath);
      console.log("domElement: %o", domElement);
      console.log("props: %o", props);
      console.log("options: %o", params);
      console.groupEnd();
    }
    return {
      component: lazy(() => import(cpath)),
      path: cpath,
      props,
      domElement,
      ...params
    };
  });
  const rootEle = document.createElement("div");
  document.body.append(rootEle);
  createRoot(rootEle).render(createElement(Manager, { components, wrapper, debug: options.debug }));
};
export {
  component_manager_default as default
};
//# sourceMappingURL=component-manager.js.map
